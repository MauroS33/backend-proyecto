<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{title}}</title>
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
  <h1>{{title}}</h1>

  <!-- Formulario de Registro -->
  <div id="register-form" style="{{#if isLogin}}display: none;{{/if}}">
    <h2>Registro</h2>
    <form id="register-form-submit">
      <label for="email">Correo Electrónico:</label>
      <input type="email" id="email" name="email" required>
      
      <label for="password">Contraseña:</label>
      <input type="password" id="password" name="password" required>
      
      <label for="firstName">Nombre:</label>
      <input type="text" id="firstName" name="firstName" required>
      
      <label for="lastName">Apellido:</label>
      <input type="text" id="lastName" name="lastName" required>
      
      <button type="submit">Registrarse</button>
    </form>
  </div>

  <!-- Formulario de Inicio de Sesión -->
  <div id="login-form" style="{{#unless isLogin}}display: none;{{/unless}}">
    <h2>Iniciar Sesión</h2>
    <form id="login-form-submit">
      <label for="email">Correo Electrónico:</label>
      <input type="email" id="email" name="email" required>
      
      <label for="password">Contraseña:</label>
      <input type="password" id="password" name="password" required>
      
      <button type="submit">Iniciar Sesión</button>
    </form>
  </div>

  <!-- Botón para Alternar entre Registro e Inicio de Sesión -->
  <p>
    {{#if isLogin}}
      ¿No tienes cuenta? <a href="/auth?mode=register">Regístrate aquí</a>.
    {{else}}
      ¿Ya tienes cuenta? <a href="/auth?mode=login">Inicia sesión aquí</a>.
    {{/if}}
  </p>

  <script>
    // Manejar el envío del formulario de registro
    document.getElementById('register-form-submit')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const userData = {
        email: formData.get('email'),
        password: formData.get('password'),
        firstName: formData.get('firstName'),
        lastName: formData.get('lastName')
      };

      try {
        const response = await fetch('/api/users/register', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(userData)
        });

        if (!response.ok) throw new Error("Error al registrar usuario");

        alert("Usuario registrado exitosamente");
        window.location.href = "/auth?mode=login"; // Redirigir al inicio de sesión
      } catch (error) {
        console.error(error.message);
        alert("Ocurrió un error al registrar el usuario");
      }
    });

    // Manejar el envío del formulario de inicio de sesión
    document.getElementById('login-form-submit')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const loginData = {
        email: formData.get('email'),
        password: formData.get('password')
      };

      try {
        const response = await fetch('/api/users/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(loginData)
        });

        if (!response.ok) throw new Error("Error al iniciar sesión");

        const { token } = await response.json();
        localStorage.setItem('token', token); // Guardar el token JWT
        alert("Inicio de sesión exitoso");
        window.location.href = "/products"; // Redirigir a la página de productos
      } catch (error) {
        console.error(error.message);
        alert("Ocurrió un error al iniciar sesión");
      }
    });
  </script>
</body>
</html>